{"version":3,"sources":["layout/Dashboard/pages/trade/ChartcardBc.js","layout/Dashboard/pages/trade/ChartcardBtc.js","layout/Dashboard/pages/trade/Chart.js","layout/Dashboard/pages/trade/Trade.js"],"names":["Chartcards","localStorage","getItem","props","useState","isLoading","setIsLoading","storage","bc","setBc","parse","value","isNaN","parseFloat","sellError","holdings","amount","undefined","buyError","balance","Math","floor","handleTransaction","values","a","axios","method","headers","url","process","data","price","action","option","crypto","account","fetchHoldings","fetchBalance","handleHistory","buyer","then","fetchCrypto","finally","fetch","useEffect","ENDPOINT","socket","socketIO","on","off","Col","sx","className","CircularProgress","size","color","onSubmit","allowNegative","render","handleSubmit","submitting","pristine","form","errors","reset","name","fullWidth","required","component","TextField","type","label","autoComplete","Button","variant","onClick","change","disabled","btc","setBtc","Chart","React","setData","handleData","response","chart_data","slice","map","date","split","catch","error","console","width","height","margin","top","right","left","bottom","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","stroke","dataKey","position","angle","fillOpacity","fill","Trade","ChartcardBtc","history","cryptoValue","ChartcardBc"],"mappings":"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","file":"static/js/9.c8b61158.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Form, Field } from 'react-final-form';\nimport { TextField } from 'final-form-material-ui';\nimport { Button } from '@material-ui/core';\nimport { Col } from 'react-bootstrap';\nimport socketIO from 'socket.io-client';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nconst storage = localStorage.getItem('token');\n\nconst Chartcards = (props) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const storage = localStorage.getItem('token');\n  const [bc, setBc] = useState(0);\n  const parse = value => (isNaN(parseFloat(value)) ? \"\" : parseFloat(value));\n  const sellError = value => (value <= props.holdings[1].amount ? \n    undefined : \n    `Can sell ${props.holdings[1].amount}`\n  );\n  const buyError = value => (value * bc <= props.balance ? \n    undefined : \n    `Can buy ${Math.floor(props.balance / bc)}`\n  );\n\n  const handleTransaction = async (values) => {\n    setIsLoading(true);\n\n    await axios({\n      method: 'post',\n      headers: { 'x-access-token': localStorage.getItem('token') },\n      url: `${process.env.REACT_APP_BACKEND}/holdings/transaction`,\n      data: {\n        price: bc,\n        action: values.option,\n        crypto: 'BitConnect',\n        amount: values.amount,\n        account: localStorage.getItem('username')\n      }\n    })\n    await props.fetchHoldings();\n    await props.fetchBalance();\n    await handleHistory(values);\n  };\n\n  const handleHistory = (values) => {\n    axios({\n      method: \"post\",\n      headers: { 'x-access-token': localStorage.getItem('token') },\n      url: `${process.env.REACT_APP_BACKEND}/history/add`,\n      data: {\n        buyer: localStorage.getItem(\"username\"),\n        crypto: \"BitConnect\",\n        action: values.option,\n        amount: values.amount,\n        price: bc\n      }\n    }).then(() => {\n      axios({\n        method: 'GET',\n        headers: { 'x-access-token': storage },\n        url: `${process.env.REACT_APP_BACKEND}/history/get`\n      })\n    }).then(() => {\n      fetchCrypto();\n    }).finally(() => {\n      setIsLoading(false);\n    })\n  }\n\n  const fetchCrypto = () => {\n    fetch(`${process.env.REACT_APP_BACKEND}/crypto`, {\n      method: 'GET',\n      headers: { 'x-access-token': storage },\n    })\n  }\n\n  useEffect(() => {\n    const ENDPOINT = `${process.env.REACT_APP_BACKEND}/`;\n    const socket = socketIO(ENDPOINT);\n\n    fetchCrypto();\n    socket.on('crypto', (data) => {    \n      setBc(data[1].value);\n    });\n\n    return () => {\n      socket.off('crypto');\n    };\n  }, []);\n\n  const onSubmit = (values) => {\n    if ((values.amount * bc <= props.balance) && values.option === \"purchased\") {\n      handleTransaction(values)\n      return null\n    }\n\n    if ((values.amount <= props.holdings[1].amount) && values.option === \"sold\") {\n      handleTransaction(values)\n      return null\n    }\n  };\n\n  return (\n    <>\n      <Col sx={6}>\n        <div className=\"chartcard_second\">\n          <div className=\"chartcard_top\">\n            <span className=\"chartcard_title\">BitConnect</span>\n            <span className=\"chartcard_value\">{bc} Kr</span>\n          </div>\n\n          <div className=\"chartcard_bottom\">\n            {isLoading ?    \n                <div className=\"loadingStyle\">\n                  <h6>Transaction in progress... </h6>\n                  <CircularProgress \n                    size=\"2rem\"\n                    color=\"lightgray\" \n                    className=\"loadingIconStyle\" />\n                </div> : \n            <Form\n              onSubmit={onSubmit}\n              allowNegative={false}\n              render={({ handleSubmit, values, submitting, pristine, form, errors}) => (\n                <form\n                className=\"chartcard_form\"\n                onSubmit={ async values => {\n                  await handleSubmit(values)\n                  form.reset();\n                }}\n                >\n                  <div>\n                    <Field\n                      className=\"label\"\n                      name=\"amount\"\n                      fullWidth\n                      required\n                      component={TextField}\n                      type=\"text\"\n                      label=\"Amount\"\n                      autoComplete=\"off\"\n                      parse={parse}\n                    />\n                  </div>\n\n                    { values.amount &&\n                      <div className=\"error_msg\">\n                        <span>{sellError(values.amount)}</span>\n                        <span>{buyError(values.amount)}</span>\n                      </div> \n                    }\n\n                  <div className=\"chartcard_buttons\">\n                    <span>\n                      <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className=\"primary_button\"\n                        type=\"submit\"\n                        onClick={() => {\n                          form.change('option', 'sold');\n                        }}\n                        disabled={submitting || pristine || sellError(values.amount) }\n                      >\n                        Sell\n                      </Button>\n                    </span>\n\n                    <span>\n                      <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className=\"primary_button\"\n                        type=\"submit\"\n                        onClick={() => {\n                          form.change('option', 'purchased');\n                        }}\n                        disabled={submitting || pristine || buyError(values.amount)}\n                      >\n                        Buy\n                      </Button>\n                    </span>\n                  </div>\n                </form>\n              )}\n            />}\n          </div>\n        </div>\n      </Col>\n    </>\n  );\n};\n\nexport default Chartcards;","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Form, Field } from 'react-final-form';\nimport { TextField } from 'final-form-material-ui';\nimport { Button } from '@material-ui/core';\nimport { Col, Modal } from 'react-bootstrap';\nimport socketIO from 'socket.io-client';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst Chartcards = (props) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const storage = localStorage.getItem('token');\n  const [btc, setBtc] = useState(0);\n  const parse = value => (isNaN(parseFloat(value)) ? \"\" : parseFloat(value));\n  const sellError = value => (value <= props.holdings[0].amount ? \n    undefined : \n    `Can sell ${props.holdings[0].amount}`\n  );\n  const buyError = value => (value * btc <= props.balance ? \n    undefined : \n    `Can buy ${Math.floor(props.balance / btc)}`\n  );\n\n  const handleTransaction = async (values) => {\n    setIsLoading(true);\n    \n    await axios({\n      method: 'post',\n      headers: { 'x-access-token': localStorage.getItem('token') },\n      url: `${process.env.REACT_APP_BACKEND}/holdings/transaction`,\n      data: {\n        price: btc,\n        action: values.option,\n        crypto: 'BitCoin',\n        amount: values.amount,\n        account: localStorage.getItem('username')\n      }\n    })\n    await props.fetchHoldings();\n    await props.fetchBalance();\n    await handleHistory(values);\n  };\n\n  const handleHistory = (values) => {\n    axios({\n      method: \"post\",\n      headers: { 'x-access-token': localStorage.getItem('token') },\n      url: `${process.env.REACT_APP_BACKEND}/history/add`,\n      data: {\n        buyer: localStorage.getItem(\"username\"),\n        crypto: \"BitCoin\",\n        action: values.option,\n        amount: values.amount,\n        price: btc\n      }\n    }).then(() => {\n      axios({\n        method: 'GET',\n        headers: { 'x-access-token': localStorage.getItem('token') },\n        url: `${process.env.REACT_APP_BACKEND}/history/get`\n      })\n    }).then(() => {\n      fetchCrypto();\n    }).finally(() => {\n      setIsLoading(false);\n    })\n  }\n\n  const fetchCrypto = () => {\n    fetch(`${process.env.REACT_APP_BACKEND}/crypto`, {\n      method: 'GET',\n      headers: { 'x-access-token': storage },\n    })\n  }\n\n  useEffect(() => {\n    const ENDPOINT = `${process.env.REACT_APP_BACKEND}/`;\n    const socket = socketIO(ENDPOINT);\n\n    fetchCrypto();\n    socket.on('crypto', (data) => {\n      setBtc(data[0].value);\n    });\n\n    return () => {\n      socket.off('crypto');\n    };\n  }, []);\n\n  const onSubmit = async (values) => {\n    if ((values.amount * btc <= props.balance) && values.option === \"purchased\") {\n      handleTransaction(values)\n      return null\n    }\n\n    if ((values.amount <= props.holdings[0].amount) && values.option === \"sold\") {\n      handleTransaction(values)\n      return null\n    }\n  };\n\n  return (\n    <>\n      \n        <Col sx={6}>\n          <div className=\"chartcard_first\">\n            <div className=\"chartcard_top\">\n              <span className=\"chartcard_title\">BitCoin</span>\n              <span className=\"chartcard_value\">{btc} Kr</span>\n            </div>\n\n            <div className=\"chartcard_bottom\">\n              {isLoading ?    \n                <div className=\"loadingStyle\">\n                  <h6>Transaction in progress... </h6>\n                  <CircularProgress \n                    size=\"2rem\"\n                    color=\"lightgray\" \n                    className=\"loadingIconStyle\" />\n                </div> : \n              <Form\n                onSubmit={onSubmit}\n                render={({ handleSubmit, values, submitting, pristine, form, errors }) => (\n                  <form\n                    className=\"chartcard_form\"\n                    onSubmit={ async (values) => {\n                      await handleSubmit(values)\n                      form.reset();\n                    }}\n                  >\n                  \n                    <div>\n                      <Field\n                        className=\"label\"\n                        name=\"amount\"\n                        fullWidth\n                        component={TextField}\n                        type=\"text\"\n                        label=\"Amount\"\n                        autoComplete=\"off\"\n                        parse={parse}\n                      />\n                    </div>\n                    \n                      { values.amount &&\n                        <div className=\"error_msg\">\n                          <span>{sellError(values.amount)}</span>\n                          <span>{buyError(values.amount)}</span>\n                        </div> \n                      }\n                      <div className=\"chartcard_buttons\">\n                        <span>\n                          <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className=\"primary_button\"\n                            type=\"submit\"\n                            onClick={() => {\n                              form.change('option', 'sold');\n                            }}\n                            disabled={submitting || pristine || !values.amount || sellError(values.amount)}\n                            >\n                            Sell\n                          </Button>\n                        </span>\n\n                        <span>\n                          <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className=\"primary_button\"\n                            type=\"submit\"\n                            onClick={() => {\n                              errors = {};\n                              form.change('option', 'purchased');\n                            }}\n                            disabled={submitting || pristine || !values.amount || buyError(values.amount)}\n                          >\n                            Buy\n                          </Button>\n                        </span>\n                      </div>\n                  </form>\n                )}\n              />}\n            </div>  \n          </div>\n      </Col>\n    </>\n  );\n};\n\nexport default Chartcards;","import React, { useEffect } from 'react';\nimport {\n  AreaChart,\n  Area,\n  LabelList,\n  XAxis,\n  YAxis,\n  Tooltip,\n  ResponsiveContainer\n} from 'recharts';\nimport axios from 'axios';\nimport socketIO from 'socket.io-client';\n\nconst Chart = () => {\n  const storage = localStorage.getItem('token');\n  const [data, setData] = React.useState([]);\n\n  const handleData = () => {\n    axios({\n      method: 'get',\n      headers: { 'x-access-token': storage },\n      url: `${process.env.REACT_APP_BACKEND}/chart/`,\n    }).then(response => {\n      const display = response.data.response.slice(-6);\n      const chart_data = display.map((data) => {\n        return {\n          date: data.date.split(' ')[1],\n          btc: data.btc,\n          bc: data.bc\n        }; \n      });\n      setData(chart_data);    \n    }).catch(error => {\n      console.error(error);\n    });\n  };\n\n  useEffect(() => {\n    const ENDPOINT = `${process.env.REACT_APP_BACKEND}/`;\n    const socket = socketIO(ENDPOINT);\n\n    socket.on('history', (data) => handleData());\n    handleData();\n\n    return () => {\n      socket.off('history');\n    };\n  }, []);\n\n  return (\n    <>\n      <ResponsiveContainer width={'99%'} height={'99%'}>\n        <AreaChart\n          data={data}\n          margin={{\n            top: 10, right: 30, left: 0, bottom: 0,\n          }}\n        >\n          <defs>\n            <linearGradient id=\"colorUv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n              <stop offset=\"5%\" stopColor=\"#8884d8\" stopOpacity={0.8} />\n              <stop offset=\"95%\" stopColor=\"#8884d8\" stopOpacity={0} />\n            </linearGradient>\n            <linearGradient id=\"colorPv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n              <stop offset=\"5%\" stopColor=\"#82ca9d\" stopOpacity={0.8} />\n              <stop offset=\"95%\" stopColor=\"#82ca9d\" stopOpacity={0} />\n            </linearGradient>\n          </defs>\n          <YAxis stroke=\"white\" />\n          <XAxis dataKey=\"date\" stroke=\"white\" />\n          <Tooltip />\n          <LabelList\n            className=\"label\"\n            dataKey=\"date\"\n            position=\"insideTop\"\n            angle=\"45\" />\n          <Area\n            type=\"monotone\"\n            dataKey=\"btc\"\n            stroke=\"#fff\"\n            fillOpacity={1}\n            fill=\"url(#colorPv)\" />\n          <Area\n            type=\"monotone\"\n            dataKey=\"bc\"\n            stroke=\"#fff\"\n            fillOpacity={1}\n            fill=\"url(#colorUv)\" />\n        </AreaChart>\n      </ResponsiveContainer>\n    </>\n  );\n};\n\nexport default Chart;","import React from 'react';\nimport ChartcardBc from './ChartcardBc';\nimport ChartcardBtc from './ChartcardBtc';\nimport Chart from './Chart';\nimport './Trade.css';\n\nconst Trade = (props) => {\n  return (\n    <>\n      <div className=\"test_container\">\n        <div className=\"test_card_container\">\n          <ChartcardBtc\n            balance={props.balance}\n            history={props.history}\n            holdings={props.holdings}\n            btc={props.btc}\n            cryptoValue={props.btc}\n            fetchHoldings={props.fetchHoldings}\n            fetchBalance={props.fetchBalance}\n            fetchCrypto={props.fetchCrypto}\n          />\n          <ChartcardBc\n            balance={props.balance}\n            history={props.history}\n            holdings={props.holdings}\n            bc={props.bc}\n            fetchHoldings={props.fetchHoldings}\n            fetchBalance={props.fetchBalance}\n            fetchCrypto={props.fetchCrypto}\n          />\n        </div>\n        <div className=\"test_chart_container\">\n          <Chart />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Trade;"],"sourceRoot":""}